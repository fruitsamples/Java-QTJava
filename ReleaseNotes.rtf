{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fnil\fcharset77 Verdana;\f1\fnil\fcharset77 Verdana-Bold;\f2\fnil\fcharset77 Verdana-BoldItalic;
\f3\fnil\fcharset77 Verdana-Italic;\f4\fswiss\fcharset77 Helvetica;}
{\colortbl;\red255\green255\blue255;\red9\green3\blue0;\red30\green0\blue184;\red7\green7\blue0;
\red4\green3\blue0;\red0\green0\blue255;\red11\green15\blue0;\red3\green7\blue0;\red6\green2\blue0;
\red11\green11\blue0;\red0\green0\blue221;\red26\green26\blue255;}
\margl1440\margr1440\vieww15060\viewh13680\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f0\fs24 \cf2 ==================================
\fs36 \cf3 \

\f1\b \cf4 Release Notes - QuickTime for Java
\f0\b0\fs24 \cf2 \
==================================\
\

\f1\b\fs36 \cf5 [1] Goals
\f0\b0\fs24 \cf2 \
\
The goal of this release is to provide QTJava developers with a new version of QTJava that works on both JDK 1.3 and JDK 1.4.1 on Mac OS X. The current version of QTJava supports JDK 1.4.1, but only on Windows. The intent of this release is to provide a minimal set of functionality across all platforms. This is achieved with the introduction of a new quicktime.app.view package, as well as additions to other packages and deprecations of some existing packages. \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural
\cf0 Because many features of QTJava are already available in standard Java, this refinement and simplification of the QTJava architecture is necessary. \cf2 \
\cf0 \
Note: All the classes that have direct bindings to the underlying QuickTime API - including all the quicktime.std packages - remain the same and are supported. Developers will still have access to all the QuickTime features through Java using these bindings. \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural
\cf2 ==================================\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f1\b\fs36 \cf0 [2] Hierarchy For All New Packages \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\fs24 \cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f0\b0 \cf2 The following describes the new packages and interfaces in this release of QTJava, notably the quicktime.app.view package, its class hierarchy and interface hierarchy:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f1\b \cf0 \
Package Hierarchies: \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f0\b0 \cf6 quicktime.app.time\cf0 , \cf6 quicktime.app.view \cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f1\b\fs36 \cf0 Class Hierarchy\
 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f0\b0\fs24 \cf0 \'a5 class java.lang.Object \
	\'a5 class quicktime.app.view. 
\f1\b \cf6 GraphicsImporterDrawer 
\f0\b0 \cf0 (implements quicktime.app.view.Presentable) \
	\'a5 class quicktime.app.view. 
\f1\b \cf6 MoviePlayer 
\f0\b0 \cf0 (implements quicktime.app.view.DrawingNotifier, 	   quicktime.app.view.Presentable, quicktime.app.time. \cf6 Timeable \cf0 )\
	\'a5 class quicktime.app.view. 
\f1\b \cf6 QTFactory \cf0 \

\f0\b0 	\'a5 class quicktime.app.view. 
\f1\b \cf6 QTImageProducer 
\f0\b0 \cf0 (implements java.awt.image.ImageProducer) \
	\'a5 class quicktime.app.time. 
\f1\b \cf6 Tasking 
\f0\b0 \cf0 (implements quicktime.app.time.Taskable) \
	\'a5 class quicktime.app.time. 
\f1\b \cf6 TaskAllMovies \cf0 \

\f0\b0 	\'a5 class quicktime.app.time. 
\f1\b \cf6 TaskThread 
\f0\b0 \cf0 (implements java.lang.Runnable) \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f1\b\fs36 \cf0 Interface Hierarchy \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f0\b0\fs24 \cf0 \'a5 interface quicktime.app.view. 
\f1\b \cf6 QTComponent \cf0 \

\f0\b0 \'a5 interface quicktime.app.view. 
\f1\b \cf6 QTJComponent \cf0 \

\f0\b0 \'a5 interface quicktime.app.time. 
\f1\b \cf6 Timeable \cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f0\b0 \cf2 ==================================\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f1\b\fs36 \cf7 [3] Migrating Existing Code to the New Classes
\f0\b0\fs24 \cf2 \
\
In order to take advantage of this new functionality, QTJava developers will need to migrate their code to use the new classes and interfaces. This means rewriting existing application code. An example is shown below in this document. \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural
\cf0 New sample code, however, is provided in this release which illustrates the usage of the new QTJava classes and methods.\cf2 \
\
\cf0 Note that these new classes are backward compatible, so that you can use the same new classes on the Java 1.3 and 1.4.1 VMs.\cf2  \
\
==================================\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f1\b\fs36 \cf7 [4] SDK Examples That Work with JDK 1.4.1
\f0\b0\fs24 \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 The following SDK examples, accompanying this release, will work with JDK 1.4.1 and the new version of QTJava. You can build and compile these examples in Xcode on Panther:\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural
\cf0 \'a5 AddTextMovie\
\'a5 PlaySound\
\'a5 TimeCallbackDemo\
\'a5 Applets\
\'a5 CustomMedia\
\'a5 KeyboardController\
\'a5 PlayTune\
\'a5 TimeCode\
\'a5 AudioBroadcaster\
\'a5 DetachedController\
\'a5 ImageFile\
\'a5 MovieCallbacks\'fc\
\'a5 SoundMemRecord\
\'a5 ImageProducing\
\'a5 MovieTextFinder\
\'a5 QTVector\
\'a5 SoundMeter\
\'a5 VRInteraction\
\'a5 ImportExport\
\'a5 Music\
\'a5 QTtoJavaImage\
\'a5 SoundRecord\
\'a5 CreatePictFile\
\'a5 DukeMovie\
\'a5 JavaDrawing\
\'a5 PlayMovie\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
The following SDK examples will 
\f1\b not
\f0\b0  work with JDK 1.4.1 and the new version of QTJava. This is because these examples use presenters, compositing, or sprites, which are not supported in the new version of QTJava.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural
\cf0 \'a5 JavaSprites\
\'a5 GroupDrawing\
\'a5 BouncingSprites\
\'a5 DraggingSprites\
\'a5 CurvesDemo\
\'a5 GraphicsExport\
\'a5 MediaPresenter\
\'a5 SlideShow\
\'a5 DraggingSpritesApplet\
\'a5 DrawableBroadcaster\
\'a5 WiredSprites\
\'a5 ImageCompositing\
\'a5 QTButtonDemo\
\'a5 QTEffects\
\'a5 Transitions\
\'a5 TextDemo\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
The following SDK examples are not yet implemented in the new version of QTJava:\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural
\cf0 \'a5 SGCapture\
\'a5 TimeSlaving\
\'a5 SGCapture2Disk\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural
\cf2 \
==================================\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f1\b\fs36 \cf8 [5] Packages Not Supported in this Release
\f0\b0\fs24 \cf0 \
\
The following packages are 
\f1\b not
\f0\b0  supported in this release of QTJava:\
\
\'a5 quicktime.app.actions\
\'a5 quicktime.app.anim\
\'a5 quicktime.app.audio\
\'a5 quicktime.app.display\
\'a5 quicktime.app.event\
\'a5 quicktime.app.image\
\'a5 quicktime.app.players\
\'a5 quicktime.app.sg\
\'a5 quicktime.app.spaces\
\'a5 quicktime.app.ui\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural
\cf2 \
This means that such capabilities as compositing, animation with sprites and spriteworld, and the usage of spaces and controllers are not supported using the new classes in this release.\
\
Although sequence grabbing is currently not supported in this release, it may be provided in future releases of QTJava. \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural
\cf0 For developers, note that QTDrawable interfaces, as well as QTCanvas and JQTCanvas, are not supported in this release. These interfaces and classes were part of the quicktime.app.display package and dealt with displaying QuickTime content in a Java AWT or Swing frame. \
\
Note that the quicktime.app.time is still supported, including classes such as TaskThread, Tasking, TaskAllMovies, and the Timeable interface. \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural
\cf2 ==================================\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f1\b\fs36 \cf8 [6] The quicktime.app.view package
\f0\b0\fs24 \cf0 \
\
The new quicktime.app.view package now deals with issues of display and the content that QuickTime can draw into Java. The underlying implementation is hidden: QTJava now provides a Java AWT or Java Swing component, based on what you want to use it for. This means that you won't need to access QTCanvas or subclass the component and add your own functionality as you want and draw into it. The component will already be constructed for you, if you want to display a movie, an image, or a movie with a controller. \
\
This new package includes the following classes:\
\
\'a5 QTFactory (which has been moved from the quicktime.app package)\
\'a5 QTImageProducer (moved from the quicktime.app.image package)\
\'a5 MoviePlayer (moved from the quicktime.app.players package)\
\'a5 GraphicsImporterDrawer (moved from the quicktime.app.image package)\
\
The package also includes two new interfaces:\
\
\'a5 QTComponent\
\'a5 QTJComponent\
\
The methods for these new interfaces and classes in the quicktime.app.view package are described in the javadoc documentation accompanying this release. \
\
Notably, the QTFactory class includes the following new factory methods, in addition to those already supported. These methods are\
\
\'a5 makeQTComponent\
\'a5 makeQTJComponent\
\
Developers can use these new methods to create either QTComponent or QTJComponent. For example, you can use the makeQTComponent() factory method, passing it a movie object, and it will return an instance of a QTComponent interface. Then, if you want, you can directly use this component, which is a regular AWT component, and add it to a Frame and display it. \
\
QTComponent and QTJComponent provide you with interfaces to set and get the existing movie or image, whichever is displayed in the component. You pass in null as a parameter in order to remove an existing image or movie controller. \
\
QTComponent has three set and get methods:\
\
\'a5 setMovie\
\'a5 setMovieController\
\'a5 setImage\
\'a5 getMovie\
\'a5 getMovieController\
\'a5 getImage\
\
The QTComponent and QTJComponent interfaces are implemented by the underlying component classes. \
\
You can create a QTComponent with an existing movie or image in it, and if you want to change the movie or image displayed, you can use the set methods to change the movie or image displayed in the component. If you just want to remove it, while cleaning up, you can pass in a null parameter.\
\
To create a movie controller, you need to pass in a movie first. You create a movie object, pass it in to a movie controller, and create a movie controller object. Then you take this movie controller object and pass it to the makeQTComponent() QTFactory method. This will return a Java AWT component, with a movie and a controller attached, and visible - displayed in that component. This will be a regular QuickTime movie with a controller attached to it. \
\
You use the makeQTJComponent() method to create a QTJComponent, which is a Swing component. To display a movie inside a Swing component, you use the QTFactory.makeQTJComponent() method. \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural
\cf2 \
==================================\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f1\b\fs36 \cf9 [7] Examples of Migrating Old QTJava Code to New QTJava Code
\f0\b0\fs24 \cf2 \
\
The following illustrate some ways that you can migrate existing QTJava code - for example, code that uses QTCanvas - to the new classes and methods supported in this release.\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f2\i\b \cf2 AWT Example :\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f1\i0 \cf2 \
Old Code
\f0\b0  :\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f3\i \cf2 Movie Example Using QTCanvas :\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f0\i0 \cf2 //create movie from QTFile\
QTFile qtfile = new QTFile (moviePath);\
Movie mov = Movie.fromFile(qtfile);\
MovieController mc = new MovieController(mov);\
QTPlayer qtp = new QTPlayer(mc);\
\
//create canvas and set the client \
QTCanvas qtc = new QTCanvas ();\
frame.add(qtc);\
qtc.setClient(qtp, true);\
\
frame.show();\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f1\b \cf2 New Code :\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f0\b0 \cf2 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f3\i \cf2 Movie Example Using QTFactory methods :
\f0\i0 \
//create movie from QTFile\
QTFile qtfile = new QTFile (moviePath);\
Movie mov = Movie.fromFile(qtfile);\
MovieController mc = new MovieController(mov);\
\
//create component using factory methods\
QTComponent movComp = QTFactory.\cf0 makeQTComponent\cf2 (mc);\
frame.add((Component)movComp);\
frame.show();\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f2\i\b \cf2 Swing Example :\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f0\i0\b0 \cf2 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f1\b \cf2 Old Code
\f0\b0  :\
//create movie from QTFile\
QTFile qtfile = new QTFile (moviePath);\
Movie mov = Movie.fromFile(qtfile);\
MoviePlayer movPlayer = new MoviePlayer(mov);\
\
//create JQTCanvas and set client \
JQTCanvas jcanvas = new JQTCanvas();\
jframe.getConentPane().add(jcanvas);\
jcanvas.setClient(movPlayer, true);\
\
jframe.show();\
\

\f1\b New Code
\f0\b0  :\
\
//create movie from QTFile\
QTFile qtfile = new QTFile (moviePath);\
Movie mov = Movie.fromFile(qtfile);\
MoviePlayer movPlayer = new MoviePlayer(mov);\
\
//create component using factory methods\
QTJComponent  movComponent = QTFactory.\cf0 makeQTJComponent\cf2 (movPlayer);\
jframe.getConentPane().add((JComponent)movComponent);\
\
jframe.show();\
\
==================================\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f1\b\fs36 \cf10 [8] QTJava Installation\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f0\b0\fs24 \cf0 \
Copy the pieces in the given paths.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f1\b \cf2 Windows :
\f0\b0 \
QTJava.dll --> In system search path , Windows System Directory\
QTJava.zip --> in JavaHome/jre/lib/ext folder\
\

\f1\b Mac OSX :
\f0\b0 \
QTJava.zip --> /System/Library/Java/Extensions\
QuickTimeJava.bundle --> /System/Library/QuickTimeJava\
\
==================================\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f1\b\fs36 \cf10 [9] Developer Feedback
\f0\b0\fs24 \cf0 \
\
The QTJava engineering team needs your feedback on this release. Your comments are essential to our development efforts. Some of the issues that are of particular importance:\
\
\'a5 What features are missing, from your point of view, in this release?\
\
\'a5 Do the new classes work for you in your application development? Do you want different interfaces? For example, do you need more convenience APIs?\
\
\'a5 What bugs have you found? 
\f4\fs28 \cf11 For complete instructions on submitting bug and enhancement reports, please see the following web site: <\cf12 \ul \ulc12 http://developer.apple.com/bugreporter\cf11 \ulnone > \
\
This information is not to be shared with anyone not covered under the NDA. This information should not be posted to any public web site. Your full cooperation and trust is appreciated.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f0\fs24 \cf2 ==================================\cf0 \
\
Copyright (c) 2003 Apple Computer, Inc. All rights reserved.\cf2 \
\
}